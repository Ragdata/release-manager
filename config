#!/usr/bin/env bash
# shellcheck disable=SC2034,SC1090,SC2015
# ==================================================================
# config
# ==================================================================
# Release Manager - Automated Release & Deployment Bot
#
# File:         config
# Author:       Ragdata
# Date:         04/02/2023
# License:      MIT License
# Copyright:    Copyright Â© 2023 Darren (Ragdata) Poulton
# ==================================================================
# Project Configurator - A tool to setup, install, and update Release Manager
# ==================================================================

set -e

export RM_REPO="$PWD"

export REPO_CFG="$RM_REPO/cfg"
export REPO_INC="$RM_REPO/inc"
export REPO_BIN="$RM_REPO/src/bin"
export REPO_ETC="$RM_REPO/src/etc"
export REPO_LIB="$RM_REPO/src/lib"


INC_FILES=(
	"$REPO_BIN/rm-install"
	"$REPO_LIB/rm/functions"
	"$REPO_LIB/rm/log"
)

TOOLS=(
	"git"
	"yq"
	"sponge"
)


[[ -f "$RM_REPO/.path" ]] && source "$RM_REPO/.path" || source "$RM_REPO/.path.dist"

for i in "${!INC_FILES[@]}"
do
	filePath="${INC_FILES[$i]}"
	if [[ -f "$filePath" ]]; then source "$filePath"; else echo "ERROR :: File '$filePath' Not Found!"; fi
done

checkBash
# checkRoot

[ "$SUDO_USER" ] && user=$SUDO_USER || user=$(whoami)

#-------------------------------------------------------------------
# FUNCTIONS
#-------------------------------------------------------------------

help() {
	cat << EOF

Project Configurator - A tool to setup, install, and update Release Manager

Usage:

	config <options>

	- or -

	bash config <options>

Options:

	-h, --help						Display this help information
	-s, --setup						Prepare the environment for installation
	-i, --install					Install Release Manager
	-u, --update					Update Release Manager
	-n, --uninstall					Uninstall Release Manager

Notes:

	You must run this script using a NON-ROOT user

EOF
}

installGit() {
	while [[ $IGIT =~ $RESP ]]
	do
		echo "This package requires Git"
		echo -en "Would you like to install it now? ${DEFAULT_Y} "
		read -n 1 -r IGIT
		[[ -z $IGIT ]] && IGIT
	done
	if [[ $IGIT =~ $AFFIRM ]]; then
		if sudo apt install -y git; then echo "Git Installed!"; else errorExit "ERROR :: Git Not Installed!"; fi
	else
		errorExit "Cannot proceed without git installed.  Please install Git and try again."
	fi
}

installYq() {
	while [[ $IYQ =~ $RESP ]]
	do
		echo "This package requires YQ"
		echo -en "Would you like to install it now? ${DEFAULT_Y} "
		read -n 1 -r IYQ
		[[ -z $IYQ ]] && IYQ
	done
	if [[ $IYQ =~ $AFFIRM ]]; then
		sudo add-apt-repository ppa:rmescandon/yq
		sudo apt update -y
		if sudo apt install -y yq; then echo "YQ Installed!"; else errorExit "ERROR :: YQ Not Installed!"; fi
		yq shell-completion bash | sudo tee /etc/bash_completion.d/yq-completion.bash &> /dev/null
		source <(yq shell-completion bash)
	else
		errorExit "Cannot proceed without yq installed.  Please install YQ and try again."
	fi
}

installUtils() {
	while [[ $IGIT =~ $RESP ]]
	do
		echo "This package requires MoreUtils"
		echo -en "Would you like to install it now? ${DEFAULT_Y} "
		read -n 1 -r IUTIL
		[[ -z $IUTIL ]] && IUTIL
	done
	if [[ $IUTIL =~ $AFFIRM ]]; then
		if sudo apt install -y git; then echo "Git Installed!"; else errorExit "ERROR :: Git Not Installed!"; fi
	else
		errorExit "Cannot proceed without git installed.  Please install Git and try again."
	fi
}

installTool() {
	case "$1" in
		git)
			installGit;;
		yq)
			installYq;;
		sponge)
			installUtils;;
		*)
			errorExit "release :: Invalid Argument"
	esac
}

# overridden function
checkCMD() {
	local fail=true
	local inst=false
	[[ -n "$2" && "$2" == 'nofail' ]] && fail=false
	[[ -n "$3" && "$3" == 'install' ]] && inst=true
    if ! command -v "$1" &>/dev/null; then
        echo "ERROR: Command '$1' Not Found!"
        [[ "$fail" == true ]] && exit 1
        [[ "$inst" == true ]] && installTool "$1"
    fi
}

check() {
	if [[ "${#TOOLS[@}" -gt 0 ]]; then
		for i in "${!TOOLS[@]}"; do
			checkCMD "${TOOLS[$i]}"
		done
	fi
}

setup() {
	clear
    echo "Release Manager Configurator"
    echo
    echo "Configuring Global Environment Variables"

    check

    [[ ! -f "$RM_REPO/.path" ]] && install -m 644 -g "$user" -o "$user" "$RM_REPO/.path.dist" "$RM_REPO/.path"

	DIRS=(
		"$RM_BIN"
		"$RM_LIB"
		"$ETC"
		"$RM_OPT"
		"$RM_LOG"
	)

    echo "export RM_REPO=$(pwd)" >> "$RM_REPO/.path"

    echo "export PATH=$RM_LIB:$RM_BIN:$ETC:$PATH" >> "$RM_REPO/.path"

    sudo install -m 644 -g root -o root --backup=simple "$RM_REPO/.path" /etc/profile.d/rm-path.sh

    cp /etc/environment /etc/environment~

    file2Env "$RM_REPO/.path" "release"

	for dir in "${!DIRS[@]}"
	do
		dirName="${dir##*/}"
		[[ ! -d "$dir" ]] && mkdir -p "$dir"
	done

    echo
    echo "DONE!"
    echo
    echo "In order to complete configuration, you need to close this session and login again"
    echo
}

#-------------------------------------------------------------------
# MAIN
#-------------------------------------------------------------------

ACTIONS=$(getopt -l "setup,install,update,uninstall,help" -o "siunh" -a -- "$@")

eval set --"$ACTIONS"

while true
do
	case $1 in
		-s|--setup)
			setup
			;;
		-i|--install)
			[[ ! -d /opt/rm ]] && setup
			rmInstall
			;;
		-u|--update)
			rmUpdate
			;;
		-n|--uninstall)
			rmUninstall
			;;
		-h|--help)
			help
			exit 0
			;;
		--)
			help
			exit 1;;
		*)
			errorExit "config :: Invalid Argument";;
	esac
	shift
done
