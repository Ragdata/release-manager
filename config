#!/usr/bin/env bash
# shellcheck disable=SC2034,SC1090,SC2015
# ==================================================================
# config
# ==================================================================
# Release Manager - Automated Release & Deployment Bot
#
# File:         config
# Author:       Ragdata
# Date:         04/02/2023
# License:      MIT License
# Copyright:    Copyright Â© 2023 Darren (Ragdata) Poulton
# ==================================================================
# Project Configurator - A tool to setup, install, and update Release Manager
# ==================================================================
[[ -f "$RM_LOG/error" ]] && sudo mv "$RM_LOG/error" "$RM_LOG/error~"

exec 2>>"$RM_LOG/error"

if [[ "$1" == "debug" ]]; then set -- "${@:2}"; set -ex; else set -e; fi

trap 'errorHandler $? ${LINENO}' ERR
#-------------------------------------------------------------------
# INITIALIZATION
#-------------------------------------------------------------------
declare -gx RM_REPO

RM_REPO="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"

declare -gx REPO_CFG="$RM_REPO/cfg"
declare -gx REPO_INC="$RM_REPO/inc"
declare -gx REPO_HLP="$REPO_INC/help"
declare -gx REPO_TPL="$REPO_INC/tmpl"
declare -gx REPO_SRC="$RM_REPO/src"
declare -gx REPO_BIN="$REPO_SRC/bin"
declare -gx REPO_ETC="$REPO_SRC/etc"
declare -gx REPO_LIB="$REPO_SRC/lib"

[ "$SUDO_USER" ] && user=$SUDO_USER || user=$(whoami)

[[ ! -f "$RM_REPO/.path" ]] && install -m 644 -g "$user" -o "$user" --backup=simple "$RM_REPO/.path.dist" "$RM_REPO/.path"

[[ -f "$RM_REPO/.path" ]] && source "$RM_REPO/.path" || source "$RM_REPO/.path.dist"

[[ -f "$RM_LIB/rm-install" ]] && source "$RM_LIB/rm-install" || source "$REPO_LIB/rm-install"
#-------------------------------------------------------------------
# VARIABLES
#-------------------------------------------------------------------
declare -agx TOOLS
declare -agx REPO_DIRS
declare -agx RM_DIRS

declare -gx LOGGING=true

TOOLS=(
	"git"
	"yq"
)

RM_DIRS=(
	"$RM_BIN"
	"$RM_LIB"
	"$ETC"
	"$RM_CFG"
	"$RM_HELP"
	"$RM_TMPL"
	"$RM_LOG"
)

#-------------------------------------------------------------------
# MAIN
#-------------------------------------------------------------------

ACTIONS=$(getopt -l "setup,install,update::,uninstall,log::,help" -o "siu::nl::h" -a -- "$@")

eval set --"$ACTIONS"

while true
do
	case $1 in
		-s|--setup)
			[[ $LOGGING == true ]] && logInit "$RM_LOG/config-setup"
			rmSetup
			exit 0
			;;
		-i|--install)
			[[ $LOGGING == true ]] && logInit "$RM_LOG/config-install"
			[[ ! -d /opt/rm ]] && rmSetup
			rmInstall
			exit 0
			;;
		-u|--update)
			[[ $LOGGING == true ]] && logInit "$RM_LOG/config-update"
			shift
			rmUpdate "${@:1}"
			exit 0
			;;
		-n|--uninstall)
			[[ $LOGGING == true ]] && logInit "$RM_LOG/config-uninstall"
			rmUninstall
			exit 0
			;;
		-l|--log)
			state="${2:-}"
			if [[ -z "$state" ]]; then
				state=true
				shift
			else
				state="$2"
				shift 2
			fi
			LOGGING="$state"
			;;
		-h|--help)
			sudo cat "$RM_HELP/config.hlp"
			exit 0
			;;
		--)
			sudo cat "$RM_HELP/config.hlp"
			exit 1;;
		*)
			errorExit "config :: Invalid Argument";;
	esac
done

# reset all traps
trap - 0 ERR
