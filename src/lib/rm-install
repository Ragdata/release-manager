#!/usr/bin/env bash
# shellcheck disable=SC2034,SC1090,SC2015
# ==================================================================
# rm-install
# ==================================================================
# Release Manager - Automated Release & Deployment Bot
#
# File:         rm-install
# Author:       Ragdata
# Date:         04/02/2023
# License:      MIT License
# Copyright:    Copyright Â© 2023 Darren (Ragdata) Poulton
# ==================================================================
# Release Manager Installer Library
# ==================================================================

#-------------------------------------------------------------------
# FUNCTIONS
#-------------------------------------------------------------------

installGit() {
	while [[ $IGIT =~ $RESP ]]
	do
		echo "This package requires Git"
		echo -en "Would you like to install it now? ${DEFAULT_Y} "
		read -n 1 -r IGIT
		[[ -z $IGIT ]] && IGIT
	done
	if [[ $IGIT =~ $AFFIRM ]]; then
		if sudo apt install -y git; then echo "Git Installed!"; else errorExit "ERROR :: Git Not Installed!"; fi
	else
		errorExit "Cannot proceed without git installed.  Please install Git and try again."
	fi
}

installYq() {
	while [[ $IYQ =~ $RESP ]]
	do
		echo "This package requires YQ"
		echo -en "Would you like to install it now? ${DEFAULT_Y} "
		read -n 1 -r IYQ
		[[ -z $IYQ ]] && IYQ
	done
	if [[ $IYQ =~ $AFFIRM ]]; then
		wget https://github.com/mikefarah/yq/releases/download/v4.30.8/yq_linux_amd64.tar.gz | tar xz && sudo mv yq_linux_amd64 /usr/bin/yq
		yq shell-completion bash | sudo tee /etc/bash_completion.d/yq-completion.bash &> /dev/null
		if source <(yq shell-completion bash); then echo "YQ Installed!"; else errorExit "ERROR :: YQ Not Installed!"; fi
	else
		errorExit "Cannot proceed without yq installed.  Please install YQ and try again."
	fi
}

installUtils() {
	while [[ $IGIT =~ $RESP ]]
	do
		echo "This package requires MoreUtils"
		echo -en "Would you like to install it now? ${DEFAULT_Y} "
		read -n 1 -r IUTIL
		[[ -z $IUTIL ]] && IUTIL
	done
	if [[ $IUTIL =~ $AFFIRM ]]; then
		if sudo apt install -y git; then echo "Git Installed!"; else errorExit "ERROR :: Git Not Installed!"; fi
	else
		errorExit "Cannot proceed without git installed.  Please install Git and try again."
	fi
}

installTool() {
	case "$1" in
		git)
			installGit;;
		yq)
			installYq;;
		sponge)
			installUtils;;
		*)
			errorExit "release :: Invalid Argument"
	esac
}

# overridden function
checkCMD() {
	local fail=true
	local inst=false
	[[ -n "$2" && "$2" == 'nofail' ]] && fail=false
	[[ -n "$3" && "$3" == 'install' ]] && inst=true
    if ! command -v "$1" &>/dev/null; then
        echo "ERROR: Command '$1' Not Found!"
        [[ "$fail" == true ]] && exit 1
        [[ "$inst" == true ]] && installTool "$1"
    fi
}

check() {
	if [[ "${#TOOLS[@]}" -gt 0 ]]; then
		for i in "${!TOOLS[@]}"; do
			checkCMD "${TOOLS[$i]}" nofail install
		done
	fi
}

rmSetup() {
	clear

	if [[ $LOGGING == true ]]; then
		echoLog "Release Manager Configuration" --color=gold
		echoLog "spacer"
		echoLog "Configuring Global Environment Variables"
	else
		echoGold "Release Manager Configuration"
		echo
		echo "Configuring Global Environment Variables"
	fi

    check

    checkBash

	line="declare -gx RM_REPO=$(pwd)"
    if ! grep -q "${line}" "$RM_REPO/.path"; then
    	[[ $EUID -ne 0 ]] && echo "${line}" | sudo tee -a "$RM_REPO/.path" &> /dev/null || echo "${line}" >> "$RM_REPO/.path"
    fi

	line="$(tail -1 "$RM_REPO/.path")"
    if [[ ! "$line" =~ .*PATH.* ]]; then
    	line="declare -gx PATH=$PATH:$RM_BIN:$RM_LIB:$ETC"
    	[[ $EUID -ne 0 ]] && echo "${line}" | sudo tee -a "$RM_REPO/.path" &> /dev/null || echo "${line}" >> "$RM_REPO/.path"
    fi

	[[ $LOGGING == true ]] && echoLog "Installing path file in /etc/profile.d" || echo "Installing path file in /etc/profile.d"

    sudo install -m 644 -g root -o root --backup=simple "$RM_REPO/.path" /etc/profile.d/rm-path.sh

	[[ $LOGGING == true ]] && echoLog "Writing PATH to /etc/environment" || echo "Writing PATH to /etc/environment"

    sudo cp /etc/environment /etc/environment~

    file2Env "$RM_REPO/.path" "release"

	[[ $LOGGING == true ]] && echoLog "Creating application paths" || echo "Creating application paths"

	for dir in "${RM_DIRS[@]}"
	do
		if [[ ! -d "$dir" ]]; then
			[[ $LOGGING == true ]] && echoLog "$dir" || echo "$dir"
			sudo mkdir -p "$dir"
		fi
	done

	if [[ $LOGGING == true ]]; then
		echoLog "spacer"
		echoLog "DONE!"
		echoLog "spacer"
		echoLog "In order to complete configuration, you need to close this session and login again"
		echoLog "spacer"
	else
		echo
		echo "DONE!"
		echo
		echo "In order to complete configuration, you need to close this session and login again"
		echo
	fi
}

rmInstall() {
	clear

	if [[ $LOGGING == true ]]; then
		echoLog "Installing Release Manager - Changelog Generator & Packager" --color=gold
		echoLog "line"
		echoLog "spacer"
	else
		echoYellow "Installing Release Manager - Changelog Generator & Packager"
		echoYellow "======================================================"
		echo
	fi

	[[ $LOGGING == true ]] && echoLog "Installing Bash Bits Loader for Release Manager"
	sudo install -m 755 -g root -o root --backup=simple "$REPO_LIB/rm-loader" "$RM_LIB/rm-loader"

	[[ $LOGGING == true ]] && echoLog "Installing remaining files for Release Manager"
	sudo install -m 755 -g root -o root --backup=simple "$REPO_ETC/release" "$ETC/release"
	sudo install -m 644 -g root -o root --backup=simple "$REPO_CFG/.angular.yml" "$RM_CFG/.angular.yml"
	sudo install -m 644 -g root -o root --backup=simple "$REPO_TPL/changelog.md" "$RM_TMPL/changelog.md"
	sudo install -m 755 -g root -o root --backup=simple "$REPO_LIB/rm-install" "$RM_LIB/rm-install"

	[[ $LOGGING == true ]] && echoLog "Installing Release Manager Help Files"
	for file in $("$REPO_HLP/*")
	do
		fileName="$(getFileName "$file")"
		if [[ ! -d "$file" && -f "$file" ]]; then
			[[ $LOGGING == true ]] && echoLog "'$file' -> '$RM_HELP/$fileName'"
			sudo install -m 755 -g root -o root --backup=simple "$file" "$RM_HELP/$fileName"
		fi
	done

	[[ $LOGGING == true ]] && echoLog "DONE!"
}

rmUpdate() {
	local ARGS=("$@")

	clear

	if [[ $LOGGING == true ]]; then
		echoLog "Updating Release Manager - Changelog Generator & Packager" --color=gold
		echoLog "line"
		echoLog "spacer"
	else
		echoYellow "Updating Release Manager - Changelog Generator & Packager"
		echoYellow "======================================================"
		echo
	fi

	echo "$@"
	exit 0

	if [[ "${#ARGS[@]}" -gt 0 ]]; then
		for i in "${!ARGS[@]}"
		do
			case "${ARGS[$i]}" in
				release)
					[[ $LOGGING == true ]] && echoLog "Updating 'etc/release'"
					sudo install -m 755 -g root -o root --backup=simple "$REPO_ETC/release" "$ETC/release"
					;;
				*)
					errorExit "rm-install :: Invalid Argument"
					;;
			esac
		done
	fi

	[[ $LOGGING == true ]] && echoLog "DONE!"
}

rmUninstall() {
	clear

	sudo rm -Rf "$RM_LIB"
	sudo rm -Rf "$RM_BIN"
	sudo rm -f "$ETC/release"
	sudo rm -Rf "$RM_OPT"
	sudo rm -Rf "$RM_LOG"
	sudo rm -f /etc/profile.d/rm-path.sh

	local active=1
	local match="# release-manager"

	sudo mv /etc/environment /etc/environment2
	touch /etc/environment

	while IFS= read -r line
	do
        [[ "$line" =~ $match && "$active" -eq 1 ]] && active=0
        [[ $active -eq 1 ]] && echo "$line" | sudo tee -a /etc/environment
        [[ "$line" =~ $match && "$active" -eq 0 ]] && active=1
	done < /etc/environment2
	sudo rm -f /etc/environment2
}

#-------------------------------------------------------------------
# MAIN
#-------------------------------------------------------------------

if [[ ! -d /opt/bb ]]; then
	echo "ERROR :: This package requires Bash Bits to be installed"
	echo "Install Bash Bits (https://github.com/ragdata/bash-bits) and try again"
fi

[[ -f "$RM_LIB/rm-loader" ]] && source "$RM_LIB/rm-loader" || source "$REPO_LIB/rm-loader"
