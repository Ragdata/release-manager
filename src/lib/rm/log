#!/usr/bin/env bash
#
# ==================================================================
# lib/rm/log
# ==================================================================
# Bash Bits - Modular Bash Library
#
# File:         lib/rm/log
# Author:       Ragdata
# Date:         04/02/2023
# License:      MIT License
# Copyright:    Copyright Â© 2022-2023 Darren (Ragdata) Poulton
# ==================================================================
# Provides Bash Bits logging functions in the absence of Bash Bits
# ==================================================================

#-------------------------------------------------------------------
# FUNCTIONS
#-------------------------------------------------------------------
#
# Help
#
logHelp() {
    clear
    echoGold "\n======================================================"
    echoGold "/usr/local/lib/stack-log.sh LIBRARY"
    echoGold "======================================================"
    echo -e "${GOLD}Usage: ${WHITE}echoLog [MESSAGE] [OPTIONS]...${_0}"
    echoGold "------------------------------------------------------"
    echo -e "${GOLD}Usage: ${WHITE}errorLog [MESSAGE] [OPTIONS]...${_0}"
    echoGold "------------------------------------------------------"
    echo -e "${GOLD}Usage: ${WHITE}exitLog [MESSAGE] [OPTIONS]...${_0}"
    echoGold "------------------------------------------------------"
    echo -e "${GOLD}Usage: ${WHITE}logInit [FILENAME]${_0}"
    echoGold "------------------------------------------------------"
    echo -e "${GOLD}Usage: ${WHITE}logWrite [MESSAGE] [OPTIONS]...${_0}"
    echoGold "======================================================\n"
    echo -e "logInit Filename which does not start with '/' is treated as relative to Stack-Kit LOGS directory\n"
    echo -e "Mandatory arguments to long options are mandatory for short options too.\n"
    echoGold "======================================================\n"
    echo -e "-h, --help\tShow this help text\n"
    # shellcheck disable=SC2059
    printf "\\$(printf "%on" 45)"
    echo -e "\t\tNo return at end of line\n"
    echo -e "-c\t\tLine continues from previous line (omits timestamp, etc)\n"
    echo -e "-I, --init\tMESSAGE field is read as either fileName or filePath to new logfile\n"
    echo -e "-i, --pid\tInclude last process PID in log message\n"
    echo -e "-e\t\tMark log entry as ERROR - set default exit code of 1\n"
    echo -e "--color=[COLOR]\tSet text color to COLOR (red, yellow, gold, white, etc)\n"
    echo -e "--error=[CODE], --code=[CODE]\n\t\tSet exit code = CODE\n"
    echo -e "-t [TAG], --tag=[TAG]\n\t\tLabel log entry with TAG\n"
    echo -e "-p [PRIORITY], --priority=[PRIORITY]\n\t\tSet long entry priority (1-9)\n"
    echo -e "-f [FILE], --file=[FILE]\n\t\tSet log message to contents of file at FILE"
    echoGold "\n======================================================\n\n"
}
#
# echoLog [MESSAGE] [OPTIONS]...
#
echoLog() {
    local args=("$@")
    local msg=""
    local color=""

    if [[ ! $1 =~ $isOPT ]]; then
        msg=${1}
        shift
    fi

    declare -A LOGOPTS

    LOGOPTS[error]=false
    LOGOPTS[log]=1
    LOGOPTS[pri]=9

    options=$(getopt -l "help,init,pid,log:,error::,code::,color::,priority::,tag::,file::" -o "nchIiep::t::f::" -a -- "$@")

    eval set --"$options"

    while true
    do
        case $1 in
            -c)
                LOGOPTS[c]=true
                ;;
            -n)
                LOGOPTS[n]=true
                ;;
            -h|--help)
                logHelp
                return 0
                ;;
            -I|--init)
                LOGOPTS[i]=true
                ;;
            -i|--pid)
                LOGOPTS[pid]="$!"
                ;;
            -e)
                LOGOPTS[error]=true
                [[ -z "${LOGOPTS[errCode]}" ]] && LOGOPTS[errCode]=1
                [[ "${LOGOPTS[pri]}" -ge 5 ]] && { LOGOPTS[pri]=4; priority="[!] "; }
                ;;
            --log)
                shift
                LOGOPTS[log]="$1"
                ;;
            --error|--code)
                shift
                LOGOPTS[error]=true
                if [[ "$1" -lt 1 ]] || [[ "$1" -gt 255 ]]; then errorExit "echoLog :: Error Code Out of Range '$1'!" --code=30; fi
                [[ "${LOGOPTS[pri]}" -ge 5 ]] && { LOGOPTS[pri]=4; priority="[!] "; }
                LOGOPTS[errCode]="$1"
                ;;
            --color)
                shift
                color=${1,,}
                case $1 in
                    black)          color=${BLACK};;
                    red)            color=${RED};;
                    green)          color=${GREEN};;
                    gold)           color=${GOLD};;
                    yellow)         color=${YELLOW};;
                    blue)           color=${BLUE};;
                    magenta)        color=${MAGENTA};;
                    cyan)           color=${CYAN};;
                    lgrey|lgray)    color=${LGREY};;
                    dgrey|dgray)    color=${DGREY};;
                    white)          color=${WHITE};;
                    default|*)      color=${DEFAULT};;
                esac
                ;;
            -p|--priority)
                shift
                case $1 in
                    1)  priority="[!!!!] ";;
                    2)  priority="[!!!] ";;
                    3)  priority="[!!] ";;
                    4)  priority="[!] ";;
                    5)  priority="[-] ";;
                    6)  priority="[N] ";;
                    7)  priority="[=]";;
                    8)  priority="[D] ";;
                    9)  priority="";;
                    *)  errorExit "echoLog :: Invalid Priority Value '$1'" --code=35
                esac
                LOGOPTS[pri]="$1"
                ;;
            -t|--tag)
                shift
                LOGOPTS[tag]="$1"
                ;;
            -f|--file)
                shift
                [[ ! -f "$1" ]] && errorExit "echoLog :: File '$1' Not Found!" --code=31
                LOGOPTS[file]="$1"
                ;;
            --)
                shift
                break
                ;;
            *)
                source "$INCDIR"/help-log
                return 0
                ;;
        esac
        shift
    done

    if [[ "${LOGOPTS[error]}" == true ]] && [[ "${LOGOPTS[pri]}" -gt 4 ]]; then
        errorExit "echoLog :: Log priority not suitable for error condition!" --code=32
    fi

    local tag=""
    local pid=""

    [[ -n "${LOGOPTS[tag]}" ]] && tag="[${LOGOPTS[tag]}] "
    [[ -n "${LOGOPTS[pid]}" ]] && pid="::${LOGOPTS[pid]}:: "
    [[ -n "${LOGOPTS[file]}" ]] && msg="$(cat "${LOGOPTS[file]}")"

    # shellcheck disable=SC2001
    msg=$(echo "$msg" | sed 's/\\e\[.+m//g')

    local prefix=""
    local suffix=""

    if [[ "${LOGOPTS[error]}" == true ]]; then
        prefix="${RED}"
        suffix="${_0}"
    elif [[ "${LOGOPTS[pri]}" == 5 ]]; then
        prefix="${YELLOW}"
        suffix="${_0}"
    elif [[ "${LOGOPTS[pri]}" == 6 ]]; then
        prefix="${GOLD}"
        suffix="${_0}"
    elif [[ "${LOGOPTS[pri]}" == 7 ]]; then
        prefix="${BLUE}"
        suffix="${_0}"
    elif [[ "${LOGOPTS[pri]}" == 8 ]]; then
        prefix="${DBUG}"
        suffix="${_0}"
    elif [[ -n "$color" ]]; then
        prefix="${color}"
        suffix="${_0}"
    fi

    if [[ "$msg" == "spacer" ]]; then
        echo
    elif [[ "$msg" == "line" ]]; then
        echo -e "${prefix}======================================================${suffix}"
    elif [[ "$msg" == "separator" ]]; then
        echo -e "${prefix}------------------------------------------------------${suffix}"
    elif [[ "${LOGOPTS[n]}" == true ]]; then
        echo -en "${prefix}${priority}${pid}${tag}${msg}${suffix}"
    elif [[ "${LOGOPTS[c]}" == true ]]; then
        echo -e "${prefix}${msg}${suffix}"
    elif [[ "${LOGOPTS[i]}" != true ]]; then
        echo -e "${prefix}${priority}${pid}${tag}${msg}${suffix}"
    fi

    local log="${LOGOPTS[log]}"

    if [[ "${LOGOPTS[i]}" == true ]]; then
        echo -en "${prefix}Initialising '${msg}' Log: ${suffix}"
        if logInit "$msg"; then echo -e "${prefix}SUCCESS!${suffix}"; else echo -e "${RED}FAILED!${_0}"; fi
        unset LOGOPTS
    else
        unset LOGOPTS
        [[ "$log" -eq 1 ]] && logWrite "${args[@]}"
    fi
}
#
# errorLog [MESSAGE] [OPTIONS]...
#
errorLog() {
    local args="$*"
    local msg=""
    local color=""
    local exitBit=false

    if [[ ! $1 =~ $isOPT ]]; then
        msg=${1}
        shift
    fi

    declare -A LOGOPTS

    LOGOPTS[log]=1
    LOGOPTS[pri]=4

    options=$(getopt -l "help,init,pid,log:,error::,code::,color::,priority::,tag::,file::" -o "xnchIiep::t::f::" -a -- "$@")

    eval set --"$options"

    while true
    do
        case $1 in
            -x)
                exitBit=true
                ;;
            -c)
                LOGOPTS[c]=true
                ;;
            -n)
                LOGOPTS[n]=true
                ;;
            -h|--help)
                logHelp
                return 0
                ;;
            -I|--init)
                exitLog "errorLog :: Cannot Initialise Log inside errorLog Statement!" --code=33
                ;;
            -i|--pid)
                LOGOPTS[pid]="$!"
                ;;
            -e)
                LOGOPTS[error]=true
                [[ -z "${LOGOPTS[errCode]}" ]] && LOGOPTS[errCode]=1
                [[ "${LOGOPTS[pri]}" -ge 5 ]] && { LOGOPTS[pri]=4; priority="[!] "; }
                ;;
            --log)
                shift
                LOGOPTS[log]="$1"
                ;;
            --error|--code)
                shift
                LOGOPTS[error]=true
                if [[ "$1" -lt 1 ]] || [[ "$1" -gt 255 ]]; then exitLog "errorLog :: Error Code Out of Range '$1'!" --code=30; fi
                [[ "${LOGOPTS[pri]}" -ge 5 ]] && { LOGOPTS[pri]=4; priority="[!] "; }
                LOGOPTS[errCode]="$1"
                ;;
            --color)
                shift
                LOGOPTS[color]="$1"
                ;;
            -p|--priority)
                shift
                case $1 in
                    1)  priority="[!!!!] ";;
                    2)  priority="[!!!] ";;
                    3)  priority="[!!] ";;
                    4)  priority="[!] ";;
                    5|6|7|8|9)
                        exitLog "errorLog :: Log priority not suitable for error condition!" --code=34
                        ;;
                    *)  exitLog "echoLog :: Invalid Priority Value '$1'" --code=35;;
                esac
                LOGOPTS[pri]="$1"
                ;;
            -t|--tag)
                shift
                LOGOPTS[tag]="$1"
                ;;
            -f|--file)
                shift
                [[ ! -f "$1" ]] && exitLog "echoLog :: File '$1' Not Found!" --code=31
                LOGOPTS[file]="$1"
                ;;
            --)
                shift
                break
                ;;
            *)
                exit 0
                ;;
        esac
        shift
    done

    [[ -z "${LOGOPTS[error]}" ]] && { LOGOPTS[error]=true; LOGOPTS[errCode]=1; args+=("-e"); }

    local tag=""
    local pid=""

    [[ -n "${LOGOPTS[tag]}" ]] && tag="[${LOGOPTS[tag]}] "
    [[ -n "${LOGOPTS[pid]}" ]] && pid="::${LOGOPTS[pid]}:: "
    [[ -n "${LOGOPTS[file]}" ]] && msg="$(cat "${LOGOPTS[file]}")"

    # shellcheck disable=SC2001
    msg=$(echo "$msg" | sed 's/\\e\[.+m//g')

    local message=""

    if [[ "$msg" == "spacer" ]]; then
        echo
        message=""
    elif [[ "$msg" == "line" ]]; then
        echo -e "${RED}======================================================${_0}"
        message="======================================================"
    elif [[ "$msg" == "separator" ]]; then
        echo -e "${RED}------------------------------------------------------${_0}"
        message="------------------------------------------------------"
    elif [[ "${LOGOPTS[n]}" == true ]]; then
        echo -en "${RED}${priority}${pid}${tag}${msg}${_0}"
        message="${priority}${pid}${tag}${msg}"
    elif [[ "${LOGOPTS[c]}" == true ]]; then
        echo -e "${RED}${msg}${_0}"
        message="$msg"
    else
        echo -e "${RED}${priority}${pid}${tag}${msg}${_0}"
        message="${priority}${pid}${tag}${msg}"
    fi

    if [[ -n "${LOGOPTS[errCode]}" ]]; then
        local errCode="${LOGOPTS[errCode]}"
    else
        local errCode=1
    fi

    local log="${LOGOPTS[log]}"

    unset LOGOPTS

    if [[ "$exitBit" == true ]]; then exitLog "$message" --code="$errCode";
    else [[ "$log" -eq 1 ]] && logWrite "${args[@]}"; fi
}
#
# exitLog [MESSAGE] [OPTIONS]...
#
exitLog() {
    local msg=${1:-"Unknown Error"}

    [[ -n "$1" ]] && shift

    local code=1
    local log=1

    # shellcheck disable=SC2154
    if [[ "$#" -ne 0 ]]; then
        for opt in "$@"
        do
            if [[ $opt =~ $isLOPTVAL ]]; then
                case "${BASH_REMATCH[1]}" in
                    error|code)
                        [[ "${BASH_REMATCH[2]}" =~ ^[1-9][0-9]*$ ]] && code="${BASH_REMATCH[2]}"
                        ;;
                    log)
                        [[ "${BASH_REMATCH[2]}" =~ ^0|1$ ]] && log="${BASH_REMATCH[2]}"
                        ;;
                esac
            fi
        done
    fi
    errorLog "${msg}" "$@"
    exit "$code"
}
#
# logInit [NAME]
#
logInit() {
    local file=${1:-"fallback"}

    declare -gx LOG

    # if the filepath passed in does not start with "/", then the logfile is saved to /var/log/bb
    [[ "${file:0:1}" == "/" ]] && LOG="${file}" || LOG="/var/log/bb/${file}"

    declare -gx logPath=${LOG%/*}
    declare -gx logFile=${LOG##*/}

    [[ ! -d "$logPath" ]] && mkdir -p "$logPath"
    [[ ! -f "$logPath"/"$logFile" ]] && touch "$logPath"/"$logFile"

    size=$(wc -c "$LOG" | awk '{print $1}')

    if [[ "$size" -gt 1024000 ]]; then
        ext=$(date '+%y%m%d.%I%M')
        mv "$LOG" "$LOG.$ext"
        touch "$LOG"
    fi
}
#
# logWrite [MESSAGE] [OPTIONS]...
#
logWrite() {
    local msg=""

    if [[ ! $1 =~ $isOPT ]]; then
        msg=${1}
        shift
    fi

    declare -A LOGOPTS

    options=$(getopt -l "help,init,pid,error::,code::,color::,priority::,tag::,file::" -o "nchIiep::t::f::" -a -- "$@")

    eval set --"$options"

    while true
    do
        case $1 in
            -n)
                LOGOPTS[n]=true
                ;;
            -c)
                LOGOPTS[c]=true
                ;;
            -h|--help)
                helpLog
                return 0
                ;;
            -I|--init)
                logInit "$msg"
                exit 0
                ;;
            -i|--pid)
                LOGOPTS[pid]="$!"
                ;;
            -e)
                LOGOPTS[error]=true
                [[ -z "${LOGOPTS[errCode]}" ]] && LOGOPTS[errCode]=1
                ;;
            --error|--code)
                shift
                LOGOPTS[error]=true
                if [[ "$1" -lt 1 ]] || [[ "$1" -gt 255 ]]; then errorExit "logWrite :: Error Code Out of Range '$1'!" --code=30; fi
                LOGOPTS[errCode]="$1"
                ;;
            --color)
                shift
                LOGOPTS[color]="$1"
                ;;
            -p|--priority)
                shift
                case $1 in
                    1)  priority="[!!EMERGENCY!!] ";;
                    2)  priority="[!!ALERT!!] ";;
                    3)  priority="[!CRITICAL!] ";;
                    4)  priority="[ERROR] ";;
                    5)  priority="[WARNING] ";;
                    6)  priority="[NOTICE] ";;
                    7)  priority="[INFO]";;
                    8)  priority="[DEBUG] ";;
                    9)  priority="";;
                    *)  errorExit "echoLog :: Invalid Priority Value '$1'" --code=35
                esac
                LOGOPTS[pri]="$1"
                ;;
            -t|--tag)
                shift
                LOGOPTS[tag]="$1"
                ;;
            -f|--file)
                shift
                [[ ! -f "$1" ]] && errorExit "logWrite :: File '$1' Not Found!" --code=31
                LOGOPTS[file]="$1"
                ;;
            --)
                shift
                break
                ;;
            *)
                source "$INCDIR"/help-log
                return 0
                ;;
        esac
        shift
    done

    if [[ -z "${LOGOPTS[pri]}" ]]; then
        if [[ "${LOGOPTS[error]}" == true ]]; then LOGOPTS[pri]=4; priority="[!] "; else LOGOPTS[pri]=9; priority=""; fi
    fi

    if [[ "${LOGOPTS[error]}" == true ]] && [[ "${LOGOPTS[pri]}" -gt 4 ]]; then
        errorExit "logWrite :: Log priority not suitable for error condition!" --code=32
    fi

    local tag=""
    local pid=""

    [[ -n "${LOGOPTS[tag]}" ]] && tag="[${LOGOPTS[tag]}] "
    [[ -n "${LOGOPTS[pid]}" ]] && pid="::${LOGOPTS[pid]}:: "
    [[ -n "${LOGOPTS[file]}" ]] && msg="$(cat "${LOGOPTS[file]}")"

    # shellcheck disable=SC2001
    msg=$(echo "$msg" | sed 's/\\e\[.+m//g')

    logTime=$(date '+%y-%m-%d:%I%M%S.%3N')

    if [[ "$msg" == "spacer" ]]; then
        echo " " >> "$LOG"
    elif [[ "$msg" == "line" ]]; then
        echo "======================================================" >> "$LOG"
    elif [[ "$msg" == "separator" ]]; then
        echo "------------------------------------------------------" >> "$LOG"
    elif [[ "${LOGOPTS[n]}" == true ]]; then
        echo -n "${logTime} - ${priority}${pid}${tag}${msg}" >> "$LOG"
    elif [[ "${LOGOPTS[c]}" == true ]]; then
        echo "${msg}" >> "$LOG"
    else
        echo "${logTime} - ${priority}${pid}${tag}${msg}" >> "$LOG"
    fi
}
