#!/usr/bin/env bash
# shellcheck disable=SC2034,SC2015,SC2015
# ==================================================================
# src/bin/install
# ==================================================================
# Release Manager - Automated Release & Deployment Bot
#
# File:         src/bin/install
# Author:       Ragdata
# Date:         13/01/2023
# License:      MIT License
# Copyright:    Copyright Â© 2022-2023 Darren Poulton (Ragdata)
# ==================================================================
set -e

help() {
    echo
}

rmInstall() {
    clear

    [[ -z "$RM_REPO" ]] && errorExit "rmInstall :: Repository Path Not Found!"

    if ! what git; then
        while [[ $IGIT =~ $RESP ]]
        do
            echo "This package requires Git"
            echo -en "Would you like to install it now? ${DEFAULT_Y} "
            read -n 1 -r IGIT
            [[ -z $IGIT ]] && IGIT="Y"
        done
        if [[ $IGIT =~ $AFFIRM ]]; then
            if sudo apt install -y git; then echo "Git Installed!"; else errorExit "ERROR :: Git Not Installed!"; fi
        else
            errorExit "Cannot proceed without git installed.  Please install Git and try again."
        fi
    fi

    if ! what jq; then
        while [[ $IJQ =~ $RESP ]]
        do
            echo "This package requires JQ"
            echo -en "Would you like to install it now? ${DEFAULT_Y} "
            read -n 1 -r IJQ
            [[ -z $IJQ ]] && IJQ="Y"
        done
        if [[ $IJQ =~ $AFFIRM ]]; then
            if sudo apt install -y jq; then echo "JQ Installed!"; else errorExit "ERROR :: JQ Not Installed!"; fi
        else
            errorExit "Cannot proceed without jq installed.  Please install jq and try again."
        fi
    fi

    if ! what jo; then
        while [[ $IJO =~ $RESP ]]
        do
            echo "This package requires JO"
            echo -en "Would you like to install it now? ${DEFAULT_Y} "
            read -n 1 -r IJO
            [[ -z $IJO ]] && IJO="Y"
        done
        if [[ $IJO =~ $AFFIRM ]]; then
            if sudo apt install -y jo; then echo "JO Installed!"; else errorExit "ERROR :: JO Not Installed!"; fi
        else
            errorExit "Cannot proceed without jo installed.  Please install jo and try again."
        fi
    fi

    if ! what sponge; then
        while [[ $IMU =~ $RESP ]]
        do
            echo "This package requires MoreUtils"
            echo -en "Would you like to install it now? ${DEFAULT_Y} "
            read -n 1 -r IMU
            [[ -z $IMU ]] && IMU="Y"
        done
        if [[ $IMU =~ $AFFIRM ]]; then
            if sudo apt install -y moreutils; then echo "MoreUtils Installed!"; else errorExit "ERROR :: MoreUtils Not Installed!"; fi
        else
            errorExit "Cannot proceed without moreutils installed.  Please install moreutils and try again."
        fi
    fi

#    if ! what unzip; then
#        while [[ $IZIP =~ $RESP ]]
#        do
#            echo "This package requires Zip/Unzip"
#            echo -en "Would you like to install it now? ${DEFAULT_Y} "
#            read -n 1 -r IZIP
#            [[ -z $IZIP ]] && IZIP="Y"
#        done
#        if [[ $IZIP =~ $AFFIRM ]]; then
#            if sudo apt install -y zip unzip; then echo "Zip/Unzip Installed!"; else errorExit "ERROR :: Zip/Unzip Not Installed!"; fi
#        else
#            errorExit "Cannot proceed without Zip/Unzip installed.  Please install Zip/Unzip and try again."
#        fi
#    fi

    if ! what fx; then
        while [[ $IFX =~ $RESP ]]
        do
            echo "This package optionally requires FX"
            echo -en "Would you like to install it now? ${DEFAULT_Y} "
            read -n 1 -r IFX
            [[ -z $IFX ]] && IFX="Y"
        done
        if [[ $IFX =~ $AFFIRM ]]; then
            cd ~ || exit 1
            wget https://github.com/antonmedv/fx/releases/download/24.0.0/fx_linux_amd64
            sudo install -m 755 -g root -o root --backup=simple fx_linux_amd64 /usr/local/bin/fx
            rm -f fx_linux_amd64
            cd - || exit 1
        fi
    fi

    [[ -f "$RM_REPO/.path" ]] && source "$RM_REPO/.path" || source "$RM_REPO/.path.dist"

    install -m 644 -g root -o root --backup=simple .path /etc/profile.d/rm-path.sh
    file2Env ".path" "release-manager"

    mkdir -p "$RM_BIN"
    mkdir -p "$RM_OPT/cfg"
    mkdir -p "$RM_OPT/inc/tpl"
    mkdir -p "$RM_LOG"

    if [[ -d "$BB_LIB" ]]; then
        # use bash-bits if it's installed
        install -m 644 -g root -o root --backup=simple src/lib/rm-loader "$BB_LIB"/rm-loader
    else
        mkdir -p "$RM_LIB"
        # otherwise, install the libraries that ship with release-manager
        install -m 644 -g root -o root --backup=simple src/lib/functions.lib "$RM_LIB"/functions.lib
        install -m 644 -g root -o root --backup=simple src/lib/log.lib "$RM_LIB"/log.lib
    fi

    install -m 644 -g root -o root --backup=simple src/etc/release "$ETC"/release
    install -m 644 -g root -o root --backup=simple src/etc/release-version "$ETC"/release-version
    install -m 644 -g root -o root --backup=simple src/bin/release "$RM_BIN"/rm-install

    install -m 644 -g root -o root --backup=simple src/cfg/.angular.rel "$RM_OPT"/cfg/.angular.rel
    install -m 644 -g root -o root --backup=simple src/cfg/.releaserc "$RM_OPT"/cfg/.releaserc

    install -m 644 -g root -o root --backup=simple src/inc/tpl/changelog.json "$RM_OPT"/inc/tpl/changelog.json
    install -m 644 -g root -o root --backup=simple src/inc/tpl/changelog.md "$RM_OPT"/inc/tpl/changelog.md

    echo
    echo "!! Release Manager Installed !!"
    echo
    echo "You must relog (logout & login again) for the installation to be complete"
    echo
}

rmUninstall() {
    clear

    rm -rf "$RM_LIB"
    rm -rf "$RM_BIN"
    rm -f "$ETC/release"
    rm -rf "$RM_OPT"
    rm -rf "$RM_LOG"
    rm -f /etc/profile.d/rm-path.sh

    active=0
    match='# release-manager'
    mv /etc/environment /etc/environment2
    touch /etc/environment
    while IFS= read -r line
    do
        [[ "$line" =~ $match && "$active" -eq 0 ]] && active=1
        [[ $active -eq 1 ]] echo "$line" >> /etc/environment
        [[ "$line" =~ $match && "$active" -eq 1 ]] && active=0
    done < /etc/environment2
    rm -f /etc/environment2
}

in_opts=$(getopt -l "process:,help" -o "p:h" -a -- "$@")

eval set --"$in_opts"

while true
do
    case $1 in
        -p|--process)
            case $2 in
                install)
                    logInit "$RM_LOG/install"
                    install
                    ;;
                uninstall)
                    logInit "$RM_LOG/uninstall"
                    uninstall
                    ;;
                --)
                    shift; break;;
                *)
                    errorExit "release :: install :: Invalid Option!"
                    ;;
            esac
            shift 2
            ;;
        -h|--help)
            help; exit 0;;
        --)
            shift; break;;
        *)
            errorExit "release :: install :: Invalid Argument!";;
    esac
done


